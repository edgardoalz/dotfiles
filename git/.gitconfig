[user]
	email = edalvz@gmail.com 
	name = Edgardo Alvarez
	signingKey = E1001B63F22372DD

[alias]
    # 99.9% times I review the log I use it this way. It makes sense.
    lod = log --oneline --decorate --color --graph
    unstage = reset HEAD --
    last = log -1 HEAD
    topics = "!f() { git branch --sort=committerdate -r | sed -e 's|remotes/||g' -e 's|origin/||g' | grep -E \"[a-z][a-z]?[a-z]?/.*\" | cut -c3- | uniq | grep -v HEAD ; }; f"
    #Bsically `log --oneline --decorate --graph` with different colors and some additional info (author and date)
    lg = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(normal)%s%C(reset) %C(dim white)%an%C(reset) %C(dim blue)(%ar)%C(reset) %C(auto)%d%C(reset)'

    # lg (see above) with --first-parent
    lgp = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(normal)%s%C(reset) %C(dim white)%an%C(reset) %C(dim blue)(%ar)%C(reset) %C(auto)%d%C(reset)' --first-parent
            
    #branches = "!f() { for line in $(git branch); do \
    #    echo $line;\
    #    if [ -n $(git config branch.$line.description) ]; then\
    #        echo $line\t\t$(git config branch.$line.description);\
    #    fi\
    #done; }; f"
    
[core]
    editor = vim
    autocrlf = input

# The following code is not mine.
# Taken from http://www.kunday.com/post/29594688306/git-config-hacks
[color]
        branch = auto
        diff = auto
        status = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green 
    changed = yellow
    untracked = red
[commit]
	gpgSign = true
[push]
	default = current
